{"version":3,"sources":["SegmentedControl.jsx","App.js","index.js"],"names":["SegmentedControl","name","segments","callback","defaultIndex","controlRef","useState","activeIndex","setActiveIndex","componentReady","useRef","useEffect","current","ref","offsetWidth","offsetLeft","style","setProperty","className","map","item","i","type","value","id","label","onChange","index","checked","htmlFor","App","selectedValue1","setSelectedValue1","selectedValue2","setSelectedValue2","val","rootElement","document","getElementById","ReactDOM","render"],"mappings":"gMA6DeA,EAtDU,SAAH,GAMf,IALLC,EAAI,EAAJA,KACAC,EAAQ,EAARA,SACAC,EAAQ,EAARA,SAAS,EAAD,EACRC,oBAAY,MAAG,EAAC,EAChBC,EAAU,EAAVA,WAEA,EAAsCC,mBAASF,GAAa,mBAArDG,EAAW,KAAEC,EAAc,KAC5BC,EAAiBC,mBAGvBC,qBAAU,WACRF,EAAeG,SAAU,CAC3B,GAAG,IAEHD,qBAAU,WACR,IACA,EADyBT,EAASK,GAAaM,IACMD,QAA7CE,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WACbC,EAAUX,EAAWO,QAArBI,MAERA,EAAMC,YAAY,oBAAoB,GAAD,OAAKH,EAAW,OACrDE,EAAMC,YAAY,oBAAoB,GAAD,OAAKF,EAAU,MACtD,GAAG,CAACR,EAAaJ,EAAUE,EAAYH,IAOvC,OACE,qBAAKgB,UAAU,qBAAqBL,IAAKR,EAAW,SAClD,qBAAKa,UAAS,mBAAcT,EAAeG,QAAU,QAAU,QAAS,SAC7D,OAARV,QAAQ,IAARA,OAAQ,EAARA,EAAUiB,KAAI,SAACC,EAAMC,GAAC,OACrB,sBAEEH,UAAS,kBAAaG,IAAMd,EAAc,SAAW,YACrDM,IAAKO,EAAKP,IAAI,UAEd,uBACES,KAAK,QACLC,MAAOH,EAAKG,MACZC,GAAIJ,EAAKK,MACTxB,KAAMA,EACNyB,SAAU,kBAnBCH,EAmBmBH,EAAKG,MAlB7Cf,EAD4BmB,EAmBwBN,QAjBpDlB,EAASoB,EAAOI,GAFI,IAACJ,EAAOI,CAmB0B,EAC5CC,QAASP,IAAMd,IAEjB,uBAAOsB,QAAST,EAAKK,MAAM,SAAEL,EAAKK,UAZ7BL,EAAKG,MAaN,OAKhB,ECEeO,EA1DH,WACV,MAA4CxB,mBAAS,YAAW,mBAAzDyB,EAAc,KAAEC,EAAiB,KACxC,EAA4C1B,mBAAS,YAAW,mBAAzD2B,EAAc,KAAEC,EAAiB,KAExC,OACE,sBAAKhB,UAAU,YAAW,UACxB,cAAC,EAAgB,CACfjB,KAAK,UACLE,SAAU,SAACgC,GAAG,OAAKH,EAAkBG,EAAI,EACzC9B,WAAYK,mBACZR,SAAU,CACR,CACEuB,MAAO,qCACPF,MAAO,qCACPV,IAAKH,oBAEP,CACEe,MAAO,aACPF,MAAO,aACPV,IAAKH,oBAEP,CACEe,MAAO,UACPF,MAAO,UACPV,IAAKH,uBAIX,oBAAGQ,UAAU,gBAAe,uBAAYa,KAExC,cAAC,EAAgB,CACf9B,KAAK,UACLE,SAAU,SAACgC,GAAG,OAAKD,EAAkBC,EAAI,EACzC9B,WAAYK,mBACZN,aAAc,EACdF,SAAU,CACR,CACEuB,MAAO,QACPF,MAAO,QACPV,IAAKH,oBAEP,CACEe,MAAO,SACPF,MAAO,SACPV,IAAKH,oBAEP,CACEe,MAAO,QACPF,MAAO,QACPV,IAAKH,uBAIX,oBAAGQ,UAAU,gBAAe,uBAAYe,OAG9C,ECvDMG,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAU,UACT,cAAC,EAAG,MAENJ,E","file":"static/js/main.bd9fb926.chunk.js","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\n/*\n * Read the blog post here:\n * https://letsbuildui.dev/articles/building-a-segmented-control-component\n */\nconst SegmentedControl = ({\n  name,\n  segments,\n  callback,\n  defaultIndex = 0,\n  controlRef\n}) => {\n  const [activeIndex, setActiveIndex] = useState(defaultIndex);\n  const componentReady = useRef();\n\n  // Determine when the component is \"ready\"\n  useEffect(() => {\n    componentReady.current = true;\n  }, []);\n\n  useEffect(() => {\n    const activeSegmentRef = segments[activeIndex].ref;\n    const { offsetWidth, offsetLeft } = activeSegmentRef.current;\n    const { style } = controlRef.current;\n\n    style.setProperty(\"--highlight-width\", `${offsetWidth}px`);\n    style.setProperty(\"--highlight-x-pos\", `${offsetLeft}px`);\n  }, [activeIndex, callback, controlRef, segments]);\n\n  const onInputChange = (value, index) => {\n    setActiveIndex(index);\n    callback(value, index);\n  };\n\n  return (\n    <div className=\"controls-container\" ref={controlRef}>\n      <div className={`controls ${componentReady.current ? \"ready\" : \"idle\"}`}>\n        {segments?.map((item, i) => (\n          <div\n            key={item.value}\n            className={`segment ${i === activeIndex ? \"active\" : \"inactive\"}`}\n            ref={item.ref}\n          >\n            <input\n              type=\"radio\"\n              value={item.value}\n              id={item.label}\n              name={name}\n              onChange={() => onInputChange(item.value, i)}\n              checked={i === activeIndex}\n            />\n            <label htmlFor={item.label}>{item.label}</label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default SegmentedControl;\n","import { useRef, useState } from \"react\";\nimport SegmentedControl from \"./SegmentedControl\";\n\nconst App = () => {\n  const [selectedValue1, setSelectedValue1] = useState(\"complete\");\n  const [selectedValue2, setSelectedValue2] = useState(\"complete\");\n\n  return (\n    <div className=\"container\">\n      <SegmentedControl\n        name=\"group-1\"\n        callback={(val) => setSelectedValue1(val)}\n        controlRef={useRef()}\n        segments={[\n          {\n            label: \"Complete asdf asdf asdf asdf saf s\",\n            value: \"complete asdf asdf asdf asdf saf s\",\n            ref: useRef()\n          },\n          {\n            label: \"Incomplete\",\n            value: \"incomplete\",\n            ref: useRef()\n          },\n          {\n            label: \"Pending\",\n            value: \"pending\",\n            ref: useRef()\n          }\n        ]}\n      />\n      <p className=\"selected-item\">Selected: {selectedValue1}</p>\n\n      <SegmentedControl\n        name=\"group-2\"\n        callback={(val) => setSelectedValue2(val)}\n        controlRef={useRef()}\n        defaultIndex={1}\n        segments={[\n          {\n            label: \"First\",\n            value: \"first\",\n            ref: useRef()\n          },\n          {\n            label: \"Second\",\n            value: \"second\",\n            ref: useRef()\n          },\n          {\n            label: \"Third\",\n            value: \"third\",\n            ref: useRef()\n          }\n        ]}\n      />\n      <p className=\"selected-item\">Selected: {selectedValue2}</p>\n    </div>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}